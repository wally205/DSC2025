"""Action Execution Agent for performing actions based on intent."""

import re
import asyncio
from typing import Dict, Any, List
from datetime import datetime

from langchain_google_genai import ChatGoogleGenerativeAI

from config import (
    get_logger, LoggerMixin, IntentType, 
    ERROR_RESPONSES,
    HIGH_CONFIDENCE_THRESHOLD, MEDIUM_CONFIDENCE_THRESHOLD, settings
)
from tools import SearchTools
from tools.agriculture_weather_advisor import AgricultureWeatherAdvisor, AgricultureAdvice, WeatherCondition


class ActionExecutor(LoggerMixin):
    """Agent responsible for executing actions based on analyzed intent."""
    
    def __init__(self):
        """Initialize action executor."""
        self.llm = ChatGoogleGenerativeAI(
            model=settings.gemini_model,  # Use configurable model
            temperature=settings.temperature,
            max_output_tokens=settings.max_output_tokens,  # Increased for longer responses
            google_api_key=settings.google_api_key
        )
        self.search_tools = SearchTools()
        self.weather_advisor = AgricultureWeatherAdvisor()
        
    async def execute_action(self, state: Dict[str, Any]) -> Dict[str, Any]:
        """
        Execute action based on intent analysis results.
        
        Args:
            state: Current state containing intent analysis results
            
        Returns:
            Updated state with response and results
        """
        intent = state.get("intent")
        confidence = state.get("confidence", 0.0)
        user_query = state.get("user_query", "")
        
        self.logger.info(
            "Executing action",
            intent=intent,
            confidence=confidence,
            query=user_query[:100]
        )
        
        try:
            # Route to appropriate action based on intent
            if intent == IntentType.SEARCH_DOCUMENT:
                result = self._handle_document_search(state)
            elif intent == IntentType.GENERAL_QUESTION:
                result = self._handle_general_question(state)
            elif intent == IntentType.WEATHER_QUERY:
                result = await self._handle_weather_query(state)
            elif intent == IntentType.WEATHER_AGRICULTURE:
                result = await self._handle_weather_agriculture(state)
            else:
                result = self._handle_unknown_intent(state)
            
            # Add execution metadata
            result.update({
                "action_completed": True,
                "execution_timestamp": self._get_timestamp()
            })
            
            self.logger.info(
                "Action execution completed",
                intent=intent,
                has_response=bool(result.get("response"))
            )
            
            return result
            
        except Exception as e:
            self.logger.error("Action execution failed", error=str(e))
            return self._create_error_response(state, str(e))
    
    def _handle_document_search(self, state: Dict[str, Any]) -> Dict[str, Any]:
        """Handle document search intent."""
        user_query = state.get("user_query", "")
        confidence = state.get("confidence", 0.0)
        
        # Perform knowledge base search
        search_result = self.search_tools.search_knowledge_base(
            query=user_query,
            limit=15,  # Further increased for maximum comprehensiveness
            min_score=0.3 if confidence >= HIGH_CONFIDENCE_THRESHOLD else 0.2  # Even lower threshold
        )
        
        if search_result["has_results"]:
            # Generate response using LLM with context
            response = self._generate_contextual_response(
                query=user_query,
                context=search_result["context"],
                sources=search_result["sources"]
            )
        else:
            response = ERROR_RESPONSES["no_results"]
        
        return {
            **state,
            "response": response,
            "response_type": "document_search",
            "search_results": search_result,
            "sources": search_result["sources"],
            "context_used": search_result.get("context", "")
        }
    
    def _handle_general_question(self, state: Dict[str, Any]) -> Dict[str, Any]:
        """Handle general question intent."""
        user_query = state.get("user_query", "")
        confidence = state.get("confidence", 0.0)
        
        # Try document search first
        search_result = self.search_tools.search_knowledge_base(
            query=user_query,
            limit=3,
            min_score=0.5
        )
        
        if search_result["has_results"] and search_result["max_confidence"] > 0.6:
            # Use document-based response
            response = self._generate_contextual_response(
                query=user_query,
                context=search_result["context"],
                sources=search_result["sources"]
            )
            response_type = "general_with_context"
        else:
            # Generate general response
            response = self._generate_general_response(user_query)
            response_type = "general_without_context"
        
        return {
            **state,
            "response": response,
            "response_type": response_type,
            "search_results": search_result,
            "sources": search_result.get("sources", []),
            "context_used": search_result.get("context", "")
        }
    
    async def _handle_weather_query(self, state: Dict[str, Any]) -> Dict[str, Any]:
        """Handle pure weather query with conversation context."""
        try:
            query = state.get("user_query", "")
            conversation_history = state.get("conversation_history", [])
            last_weather_data = state.get("last_weather_data")
            last_location = state.get("last_location")
            
            self.logger.info(f"Processing weather query: {query}")
            
            # Check if this is a follow-up question
            is_followup = self._is_weather_followup_question(query, conversation_history)
            
            # Extract location - use last location for follow-up questions
            if is_followup and last_location:
                location = last_location
                self.logger.info(f"Using previous location for follow-up: {location}")
            else:
                location = self._extract_location_from_query(query)
            
            if not location:
                return {
                    **state,
                    "response": (
                        "üó∫Ô∏è **C·∫ßn th√¥ng tin ƒë·ªãa ƒëi·ªÉm**\n\n"
                        "ƒê·ªÉ xem th√¥ng tin th·ªùi ti·∫øt, vui l√≤ng cho bi·∫øt b·∫°n mu·ªën bi·∫øt th·ªùi ti·∫øt ·ªü ƒë√¢u:\n"
                        "‚Ä¢ T·ªânh/th√†nh ph·ªë (v√≠ d·ª•: H·ªì Ch√≠ Minh, H√† N·ªôi)\n"
                        "‚Ä¢ Huy·ªán/qu·∫≠n c·ª• th·ªÉ (v√≠ d·ª•: Bu√¥n Ma Thu·ªôt, Qu·∫≠n 1)\n"
                        "‚Ä¢ X√£/ph∆∞·ªùng chi ti·∫øt (v√≠ d·ª•: x√£ Ea Kao)\n\n"
                        "üí° *V√≠ d·ª•: 'th·ªùi ti·∫øt h√¥m nay ·ªü ƒê·∫Øk L·∫Øk'*"
                    ),
                    "response_type": "weather_query",
                    "search_results": None
                }
            
            # Get weather data - use cached data for recent follow-ups
            if (is_followup and last_weather_data and 
                last_weather_data.get('location') == location and
                datetime.now().timestamp() - last_weather_data.get('timestamp', 0) < 1800):  # 30 minutes
                weather = last_weather_data['weather']
                self.logger.info("Using cached weather data for follow-up")
            else:
                weather = await self.weather_advisor.get_current_weather(location)
            
            if not weather:
                return {
                    **state,
                    "response": (
                        f"‚ùå **Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu th·ªùi ti·∫øt cho '{location}'**\n\n"
                        "Vui l√≤ng ki·ªÉm tra l·∫°i t√™n ƒë·ªãa ƒëi·ªÉm ho·∫∑c th·ª≠ v·ªõi:\n"
                        "‚Ä¢ T√™n t·ªânh/th√†nh ph·ªë ch√≠nh x√°c\n"
                        "‚Ä¢ T√™n huy·ªán/qu·∫≠n l·ªõn trong khu v·ª±c\n"
                        "‚Ä¢ T√™n ti·∫øng Vi·ªát kh√¥ng d·∫•u\n\n"
                        "üí° *V√≠ d·ª•: thay v√¨ 'Kr√¥ng NƒÉng' h√£y th·ª≠ 'Dak Lak'*"
                    ),
                    "response_type": "weather_query",
                    "search_results": None
                }
            
            # Format pure weather response (without agriculture advice)
            response = self._format_pure_weather_response(weather)
            
            # Update state with weather data
            weather_data_update = {
                'weather': weather,
                'location': location,
                'timestamp': datetime.now().timestamp()
            }
            
            return {
                **state,
                "response": response,
                "response_type": "weather_query",
                "last_weather_data": weather_data_update,
                "last_location": location,
                "search_results": {
                    "has_results": True,
                    "context": response,
                    "sources": [{
                        "type": "weather_api",
                        "location": weather.location_name,
                        "weather_summary": f"{weather.temperature}¬∞C, {weather.description}",
                        "confidence": "95%"
                    }],
                    "max_confidence": 0.95
                }
            }
            
        except Exception as e:
            self.logger.error(f"Error in weather query handling: {e}")
            return {
                **state,
                "response": (
                    "‚ö†Ô∏è **L·ªói l·∫•y th√¥ng tin th·ªùi ti·∫øt**\n\n"
                    "Xin l·ªói, t√¥i g·∫∑p s·ª± c·ªë khi l·∫•y th√¥ng tin th·ªùi ti·∫øt. "
                    "Vui l√≤ng th·ª≠ l·∫°i sau √≠t ph√∫t.\n\n"
                    "üí° *C√≥ th·ªÉ th·ª≠ v·ªõi t√™n ƒë·ªãa ƒëi·ªÉm kh√°c ho·∫∑c li√™n h·ªá h·ªó tr·ª£.*"
                ),
                "response_type": "weather_error",
                "search_results": None
            }
    
    async def _handle_weather_agriculture(self, state: Dict[str, Any]) -> Dict[str, Any]:
        """Handle weather-agriculture consultation requests with conversation context."""
        try:
            query = state.get("user_query", "")
            conversation_history = state.get("conversation_history", [])
            last_weather_data = state.get("last_weather_data")
            last_location = state.get("last_location")
            
            self.logger.info(f"Processing weather-agriculture query: {query}")
            self.logger.info(f"State keys: {list(state.keys())}")
            self.logger.info(f"Conversation history: {len(conversation_history) if conversation_history else 0} items")
            self.logger.info(f"Last weather data: {bool(last_weather_data)}")
            self.logger.info(f"Last location: {last_location}")
            
            # Check if this is a follow-up question
            is_followup = self._is_weather_followup_question(query, conversation_history)
            self.logger.info(f"Follow-up detected: {is_followup}")
            
            # Extract location - use last location for follow-up questions
            if is_followup and last_location:
                location = last_location
                self.logger.info(f"Using previous location for follow-up: {location}")
            else:
                location = self._extract_location_from_query(query)
                self.logger.info(f"Extracted location from query: {location}")
            
            if not location:
                return {
                    **state,
                    "response": (
                        "üó∫Ô∏è **C·∫ßn th√¥ng tin ƒë·ªãa ƒëi·ªÉm**\n\n"
                        "ƒê·ªÉ ƒë∆∞a ra t∆∞ v·∫•n ch√≠nh x√°c, vui l√≤ng cho bi·∫øt b·∫°n ƒëang ·ªü:\n"
                        "‚Ä¢ T·ªânh/th√†nh ph·ªë (v√≠ d·ª•: ƒê·∫Øk L·∫Øk, L√¢m ƒê·ªìng)\n"
                        "‚Ä¢ Ho·∫∑c huy·ªán/qu·∫≠n c·ª• th·ªÉ (v√≠ d·ª•: Bu√¥n Ma Thu·ªôt)\n"
                        "‚Ä¢ Ho·∫∑c x√£/ph∆∞·ªùng chi ti·∫øt (v√≠ d·ª•: x√£ Ea Kao)\n\n"
                        "üí° *B·∫°n c√≥ th·ªÉ h·ªèi: 'th·ªùi ti·∫øt ·ªü ƒê·∫Øk L·∫Øk nh∆∞ th·∫ø n√†o cho c√† ph√™?'*"
                    ),
                    "response_type": "weather_agriculture",
                    "search_results": None
                }
            
            # Get weather data - use cached data for recent follow-ups
            if (is_followup and last_weather_data and 
                last_weather_data.get('location') == location and
                datetime.now().timestamp() - last_weather_data.get('timestamp', 0) < 1800):  # 30 minutes
                weather = last_weather_data['weather']
                self.logger.info("Using cached weather data for follow-up")
            else:
                self.logger.info(f"Fetching new weather data for location: {location}")
                weather = await self.weather_advisor.get_current_weather(location)
                if not weather:
                    self.logger.warning(f"Weather API failed for {location}, using demo data")
                    weather = self.weather_advisor._get_demo_weather_data(location)
            
            if not weather:
                self.logger.error(f"No weather data available for {location}")
                return {
                    **state,
                    "response": (
                        f"‚ùå **Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu th·ªùi ti·∫øt cho '{location}'**\n\n"
                        "Vui l√≤ng ki·ªÉm tra l·∫°i t√™n ƒë·ªãa ƒëi·ªÉm ho·∫∑c th·ª≠ v·ªõi:\n"
                        "‚Ä¢ T√™n t·ªânh/th√†nh ph·ªë ch√≠nh x√°c\n"
                        "‚Ä¢ T√™n huy·ªán/qu·∫≠n l·ªõn trong khu v·ª±c\n"
                        "‚Ä¢ T√™n ti·∫øng Vi·ªát kh√¥ng d·∫•u\n\n"
                        "üí° *V√≠ d·ª•: thay v√¨ 'Kr√¥ng NƒÉng' h√£y th·ª≠ 'Dak Lak'*"
                    ),
                    "response_type": "weather_agriculture",
                    "search_results": None
                }
            
            # Extract crop type
            crop_type = self._extract_crop_from_query(query)
            
            # Get agriculture advice
            advice = await self.weather_advisor.generate_agriculture_advice(
                location=location, 
                crop_type=crop_type
            )
            
            # Get detailed context from knowledge base
            detailed_context = self._get_detailed_agriculture_context(crop_type, weather, query)
            
            # Generate comprehensive response
            response = self._generate_comprehensive_weather_agriculture_response(
                weather=weather,
                advice=advice,
                detailed_context=detailed_context,
                user_query=query,
                conversation_history=conversation_history
            )
            
            # Update state with new weather data
            weather_data_update = {
                'weather': weather,
                'location': location,
                'timestamp': datetime.now().timestamp()
            }
            
            # Create sources info
            sources = [{
                "type": "weather_api",
                "location": weather.location_name,
                "weather_summary": f"{weather.temperature}¬∞C, {weather.description}",
                "confidence": "95%"
            }]
            
            # Add knowledge base sources
            if detailed_context.get("sources"):
                sources.extend(detailed_context["sources"])
            
            return {
                **state,
                "response": response,
                "response_type": "weather_agriculture_detailed",
                "last_weather_data": weather_data_update,
                "last_location": location,
                "search_results": {
                    "has_results": True,
                    "context": response,
                    "sources": sources,
                    "max_confidence": 0.95
                },
                "sources": sources
            }
            
        except Exception as e:
            self.logger.error(f"Error in weather-agriculture handling: {e}")
            import traceback
            self.logger.error(f"Full traceback: {traceback.format_exc()}")
            return {
                **state,
                "response": (
                    f"‚ö†Ô∏è **Debug: L·ªói x·ª≠ l√Ω y√™u c·∫ßu**\n\n"
                    f"Error: {str(e)}\n\n"
                    f"Query: {state.get('user_query', 'N/A')}\n"
                    f"Conversation history length: {len(state.get('conversation_history', []))}\n"
                    f"Last weather data: {bool(state.get('last_weather_data'))}\n"
                    f"Last location: {state.get('last_location', 'N/A')}\n\n"
                    "Vui l√≤ng th·ª≠ l·∫°i ho·∫∑c li√™n h·ªá h·ªó tr·ª£ k·ªπ thu·∫≠t."
                ),
                "response_type": "weather_agriculture_error",
                "search_results": None
            }
    
    def _extract_location_and_crop(self, query: str) -> tuple[str, str]:
        """Extract location and crop type from query."""
        # Default location (Vietnam)
        location = "H√† N·ªôi"
        crop = "c√† ph√™"
        
        # Extract Vietnamese locations
        location_patterns = [
            r'\b(H√† N·ªôi|h√† n·ªôi|hanoi)\b',
            r'\b(H·ªì Ch√≠ Minh|h·ªì ch√≠ minh|s√†i g√≤n|saigon|tp hcm)\b',
            r'\b(ƒê√† N·∫µng|ƒë√† n·∫µng|da nang)\b',
            r'\b(ƒêƒÉk LƒÉk|ƒëƒÉk lƒÉk|dak lak|bu√¥n ma thu·ªôt)\b',
            r'\b(Gia Lai|gia lai|pleiku)\b',
            r'\b(L√¢m ƒê·ªìng|l√¢m ƒë·ªìng|ƒë√† l·∫°t)\b',
            r'\b(Kon Tum|kon tum)\b',
            r'\b(Ngh·ªá An|ngh·ªá an|vinh)\b'
        ]
        
        for pattern in location_patterns:
            match = re.search(pattern, query, re.IGNORECASE)
            if match:
                location_text = match.group(1).lower()
                if "h√† n·ªôi" in location_text or "hanoi" in location_text:
                    location = "H√† N·ªôi"
                elif "h·ªì ch√≠ minh" in location_text or "s√†i g√≤n" in location_text or "saigon" in location_text:
                    location = "H·ªì Ch√≠ Minh"
                elif "ƒë√† n·∫µng" in location_text:
                    location = "ƒê√† N·∫µng"
                elif "ƒëƒÉk lƒÉk" in location_text or "bu√¥n ma thu·ªôt" in location_text:
                    location = "Bu√¥n Ma Thu·ªôt"
                elif "gia lai" in location_text or "pleiku" in location_text:
                    location = "Pleiku"
                elif "l√¢m ƒë·ªìng" in location_text or "ƒë√† l·∫°t" in location_text:
                    location = "ƒê√† L·∫°t"
                break
        
        # Extract crop type
        crop_patterns = [
            r'\b(c√† ph√™|cafe|coffee)\b',
            r'\b(l√∫a|rice|g·∫°o)\b',
            r'\b(khoai t√¢y|potato)\b',
            r'\b(h·ªì ti√™u|pepper|ti√™u)\b',
            r'\b(ng√¥|corn|b·∫Øp)\b',
            r'\b(ƒë·∫≠u|bean)\b'
        ]
        
        for pattern in crop_patterns:
            match = re.search(pattern, query, re.IGNORECASE)
            if match:
                crop_text = match.group(1).lower()
                if "c√† ph√™" in crop_text or "cafe" in crop_text or "coffee" in crop_text:
                    crop = "c√† ph√™"
                elif "l√∫a" in crop_text or "rice" in crop_text:
                    crop = "l√∫a"
                elif "khoai" in crop_text or "potato" in crop_text:
                    crop = "khoai t√¢y"
                elif "h·ªì ti√™u" in crop_text or "pepper" in crop_text or "ti√™u" in crop_text:
                    crop = "h·ªì ti√™u"
                break
        
        return location, crop
    
    def _format_weather_advice_response(self, advice: 'AgricultureAdvice', weather: 'WeatherCondition' = None) -> str:
        """Format weather advice into readable response with real API data."""
        response_parts = []
        
        # Header with real location and time  
        current_time = weather.timestamp if weather else datetime.now()
        location_name = weather.location_name if weather else advice.location
        response_parts.append(f"TH·ªúI TI·∫æT (l√∫c {current_time.strftime('%H:%M')})")
        response_parts.append(f"{location_name}")
        response_parts.append(f"CN, {current_time.strftime('%d/%m/%Y')}, {current_time.strftime('%H:%M')}")
        response_parts.append("")
        
        # Main temperature display
        main_temp = weather.temperature if weather else 25.0
        main_desc = weather.description if weather else "Tr·ªùi quang"
        response_parts.append(f"{main_temp:.1f}¬∞C")
        response_parts.append(f"{main_desc}")
        response_parts.append("")
        
        # Weather details in grid format using REAL API data
        response_parts.append("CHI TI·∫æT | NHI·ªÜT ƒê·ªò | T·ªêC ƒê·ªò GI√ì (km/h)")
        response_parts.append("")
        
        if weather:
            # Row 1: Temperature, Feels like, Humidity
            response_parts.append(f"Nhi·ªát ƒë·ªô        | C·∫£m gi√°c ...     | ƒê·ªô ·∫©m")
            response_parts.append(f"{weather.temperature:.1f}¬∞C            | {weather.feels_like:.1f}¬∞C          | {weather.humidity}%")
            response_parts.append("")
            
            # Row 2: Wind, Rain probability, Pressure  
            response_parts.append(f"Gi√≥             | Kh·∫£ nƒÉng ...     | √Åp su·∫•t kh...")
            response_parts.append(f"{weather.wind_speed:.1f} km/h       | {weather.rain_probability:.0f}%              | {weather.pressure:.0f} hPa")
            response_parts.append("")
            
            # Row 3: Visibility, UV Index, Cloud cover
            response_parts.append(f"T·∫ßm nh√¨n        | Ch·ªâ s·ªë UV       | ƒê·ªô che m√¢y")
            response_parts.append(f"{weather.visibility:.1f} km         | {weather.uv_index:.2f}            | {weather.clouds}%")
            response_parts.append("")
            
            # Row 4: Dew point, Sunrise, Sunset  
            sunrise_time = weather.sunrise.strftime('%H:%M') if weather.sunrise else "06:15"
            sunset_time = weather.sunset.strftime('%H:%M') if weather.sunset else "18:30"
            response_parts.append(f"ƒêi·ªÉm s∆∞∆°ng      | B√¨nh minh       | Ho√†ng h√¥n")
            response_parts.append(f"{weather.dew_point:.1f}¬∞C          | {sunrise_time}           | {sunset_time}")
            response_parts.append("")
        else:
            # Fallback if no weather data
            response_parts.append(f"Nhi·ªát ƒë·ªô        | C·∫£m gi√°c nh∆∞    | ƒê·ªô ·∫©m")
            response_parts.append(f"25.0¬∞C            | 27.0¬∞C          | 65%")
            response_parts.append("")
        
        # Weather description
        response_parts.append(f"T√¨nh tr·∫°ng: {main_desc}")
        response_parts.append("")
        
        # Agriculture advice section
        response_parts.append("=== T∆Ø V·∫§N N√îNG NGHI·ªÜP ===")
        response_parts.append(f"C√¢y tr·ªìng: {advice.crop_type}")
        response_parts.append("")
        
        # Recommendations
        if advice.recommendations:
            response_parts.append("KHUY·∫æN NGH·ªä:")
            for i, rec in enumerate(advice.recommendations, 1):
                response_parts.append(f"{i}. {rec}")
            response_parts.append("")
        
        # Optimal activities
        if advice.optimal_activities:
            response_parts.append("N√äN TH·ª∞C HI·ªÜN:")
            for i, activity in enumerate(advice.optimal_activities, 1):
                response_parts.append(f"{i}. {activity}")
            response_parts.append("")
        
        # Activities to avoid
        if advice.avoid_activities:
            response_parts.append("N√äN TR√ÅNH:")
            for i, activity in enumerate(advice.avoid_activities, 1):
                response_parts.append(f"{i}. {activity}")
            response_parts.append("")
        
        # Warnings
        if advice.warnings:
            response_parts.append("C·∫¢NH B√ÅO:")
            for i, warning in enumerate(advice.warnings, 1):
                response_parts.append(f"{i}. {warning}")
            response_parts.append("")
        
        # Confidence score
        response_parts.append(f"ƒê·ªô tin c·∫≠y: {advice.confidence:.1%}")
        
        return "\n".join(response_parts)
    
    def _handle_unknown_intent(self, state: Dict[str, Any]) -> Dict[str, Any]:
        """Handle unknown intent."""
        confidence = state.get("confidence", 0.0)
        
        if confidence < 0.3:
            response = ERROR_RESPONSES["unknown_intent"]
        else:
            response = ERROR_RESPONSES["low_confidence"]
        
        return {
            **state,
            "response": response,
            "response_type": "unknown",
            "search_results": None,
            "sources": []
        }
    
    def _generate_contextual_response(
        self,
        query: str,
        context: str,
        sources: list
    ) -> str:
        """Generate response using LLM with retrieved context."""
        prompt = f"""
        B·∫°n l√† m·ªôt chuy√™n gia n√¥ng nghi·ªáp gi√†u kinh nghi·ªám, chuy√™n t∆∞ v·∫•n v·ªÅ canh t√°c c√† ph√™, l√∫a, h·ªì ti√™u, ng√¥, khoai t√¢y v√† c√°c c√¢y tr·ªìng kh√°c. H√£y tr·∫£ l·ªùi c√¢u h·ªèi m·ªôt c√°ch t·ª± nhi√™n, th√¢n thi·ªán v√† chi ti·∫øt nh∆∞ ƒëang t∆∞ v·∫•n tr·ª±c ti·∫øp cho n√¥ng d√¢n.

        C√¢u h·ªèi: "{query}"

        Ki·∫øn th·ª©c tham kh·∫£o:
        {context}

        H√£y tr·∫£ l·ªùi m·ªôt c√°ch:
        ‚Ä¢ **T·ª± nhi√™n**: Nh∆∞ ƒëang n√≥i chuy·ªán v·ªõi n√¥ng d√¢n, kh√¥ng c·∫ßn nh·∫Øc ƒë·∫øn "t√†i li·ªáu" hay "theo th√¥ng tin"
        ‚Ä¢ **Th·ª±c t·∫ø**: ƒê∆∞a ra l·ªùi khuy√™n c·ª• th·ªÉ, c√≥ th·ªÉ √°p d·ª•ng ƒë∆∞·ª£c ngay
        ‚Ä¢ **To√†n di·ªán**: Bao g·ªìm nguy√™n nh√¢n, tri·ªáu ch·ª©ng, c√°ch ph√≤ng tr·ª´, th·ªùi ƒëi·ªÉm th√≠ch h·ª£p
        ‚Ä¢ **C√≥ c·∫•u tr√∫c**: S·ª≠ d·ª•ng ti√™u ƒë·ªÅ v√† bullet points ƒë·ªÉ d·ªÖ ƒë·ªçc
        ‚Ä¢ **Chi ti·∫øt**: Vi·∫øt ƒë·∫ßy ƒë·ªß 400-600 t·ª´ v·ªõi th√¥ng tin h·ªØu √≠ch

        Vi·∫øt nh∆∞ m·ªôt chuy√™n gia ƒëang chia s·∫ª kinh nghi·ªám th·ª±c t·∫ø, kh√¥ng ph·∫£i ƒëang tr√≠ch d·∫´n t√†i li·ªáu.
        """
        
        try:
            response = self.llm.invoke(prompt)
            content = response.content.strip()
            
            # Add sources in a natural way
            if sources:
                content += f"\n\n---\n*Th√¥ng tin tham kh·∫£o t·ª´: {', '.join([s.get('filename', 't√†i li·ªáu chuy√™n ng√†nh').replace('.pdf', '') for s in sources])}"
            
            return content
            
        except Exception as e:
            self.logger.error("Failed to generate contextual response", error=str(e))
            return self.search_tools.format_response(context, query, sources)
    
    def _generate_general_response(self, query: str) -> str:
        """Generate general response for questions without context."""
        prompt = f"""
        Ng∆∞·ªùi d√πng h·ªèi: "{query}"

        B·∫°n l√† m·ªôt chuy√™n gia n√¥ng nghi·ªáp th√¢n thi·ªán. H√£y tr·∫£ l·ªùi m·ªôt c√°ch l·ªãch s·ª± r·∫±ng b·∫°n chuy√™n 
        t∆∞ v·∫•n v·ªÅ canh t√°c c√°c lo·∫°i c√¢y tr·ªìng nh∆∞ c√† ph√™, l√∫a, h·ªì ti√™u, ng√¥, khoai t√¢y d·ª±a tr√™n 
        ki·∫øn th·ª©c chuy√™n m√¥n c√≥ s·∫µn.

        G·ª£i √Ω h·ªç h·ªèi nh·ªØng c√¢u h·ªèi c·ª• th·ªÉ h∆°n v·ªÅ:
        - K·ªπ thu·∫≠t canh t√°c
        - Ph√≤ng tr·ª´ s√¢u b·ªánh  
        - ChƒÉm s√≥c c√¢y tr·ªìng
        - Bi·ªán ph√°p tƒÉng nƒÉng su·∫•t

        Tr·∫£ l·ªùi ng·∫Øn g·ªçn, th√¢n thi·ªán v√† h∆∞·ªõng d·∫´n c·ª• th·ªÉ.
        """
        
        try:
            response = self.llm.invoke(prompt)
            return response.content.strip()
        except Exception as e:
            self.logger.error("Failed to generate general response", error=str(e))
            return ERROR_RESPONSES["no_results"]
    
    def _create_error_response(self, state: Dict[str, Any], error: str) -> Dict[str, Any]:
        """Create error response."""
        return {
            **state,
            "response": ERROR_RESPONSES["processing_error"],
            "response_type": "error",
            "search_results": None,
            "sources": [],
            "error": error,
            "action_completed": False
        }
    
    def _extract_location_from_query(self, query: str) -> str:
        """Extract location from weather query using smart detection."""
        try:
            # First try LLM-based extraction for better accuracy
            location = self._extract_location_with_llm(query)
            if location and location != "Unknown":
                return location
        except Exception as e:
            self.logger.warning(f"LLM location extraction failed: {e}")
        
        # Fallback to pattern-based extraction
        return self._extract_location_with_patterns(query)
    
    def _extract_location_with_llm(self, query: str) -> str:
        """Use LLM to extract location from query with detailed administrative levels."""
        prompt = f"""
        H√£y tr√≠ch xu·∫•t ƒë·ªãa ƒëi·ªÉm ch√≠nh x√°c nh·∫•t t·ª´ c√¢u h·ªèi sau.
        ∆Øu ti√™n tr√≠ch xu·∫•t ƒë·∫øn c·∫•p x√£/ph∆∞·ªùng/th·ªã tr·∫•n n·∫øu c√≥, sau ƒë√≥ ƒë·∫øn huy·ªán/qu·∫≠n, r·ªìi t·ªânh/th√†nh ph·ªë.
        Tr·∫£ v·ªÅ t√™n ƒë·ªãa ƒëi·ªÉm b·∫±ng ti·∫øng Anh ƒë·ªÉ s·ª≠ d·ª•ng v·ªõi API th·ªùi ti·∫øt.

        C√¢u h·ªèi: "{query}"

        Quy t·∫Øc tr√≠ch xu·∫•t theo th·ª© t·ª± ∆∞u ti√™n:
        1. **X√£/Ph∆∞·ªùng/Th·ªã tr·∫•n**: N·∫øu c√≥ ƒë·ªÅ c·∫≠p x√£/ph∆∞·ªùng c·ª• th·ªÉ
        2. **Huy·ªán/Qu·∫≠n**: N·∫øu c√≥ ƒë·ªÅ c·∫≠p huy·ªán/qu·∫≠n c·ª• th·ªÉ  
        3. **T·ªânh/Th√†nh ph·ªë**: N·∫øu ch·ªâ c√≥ t·ªânh/th√†nh ph·ªë
        4. **Th√†nh ph·ªë l·ªõn**: ∆Øu ti√™n th√†nh ph·ªë ch√≠nh c·ªßa t·ªânh

        V√≠ d·ª• chi ti·∫øt:
        - "x√£ T√¢n Ph√∫, huy·ªán Ch√¢u Th√†nh, An Giang" ‚Üí "Tan Phu, Chau Thanh, An Giang"
        - "ph∆∞·ªùng 1, qu·∫≠n 1, TP HCM" ‚Üí "Ward 1, District 1, Ho Chi Minh City"  
        - "huy·ªán ƒê·∫Øk P∆°, Gia Lai" ‚Üí "Dak Po, Gia Lai"
        - "th·ªã tr·∫•n Pleiku, Gia Lai" ‚Üí "Pleiku, Gia Lai"
        - "Gia Lai" ‚Üí "Pleiku" (th√†nh ph·ªë ch√≠nh)
        - "L√¢m ƒê·ªìng" ‚Üí "Da Lat" (th√†nh ph·ªë ch√≠nh)
        - "ƒê·∫Øk L·∫Øk" ‚Üí "Buon Ma Thuot" (th√†nh ph·ªë ch√≠nh)
        - "Kh√°nh H√≤a" ‚Üí "Nha Trang" (th√†nh ph·ªë ch√≠nh)

        ƒê·∫∑c bi·ªát l∆∞u √Ω:
        - V·ªõi c√°c t·ªânh mi·ªÅn n√∫i/n√¥ng th√¥n: tr·∫£ v·ªÅ t√™n huy·ªán ho·∫∑c th·ªã tr·∫•n ch√≠nh
        - V·ªõi th√†nh ph·ªë l·ªõn: c√≥ th·ªÉ tr·∫£ v·ªÅ qu·∫≠n/huy·ªán c·ª• th·ªÉ
        - N·∫øu kh√¥ng r√µ ƒë·ªãa ƒëi·ªÉm: tr·∫£ v·ªÅ "Ho Chi Minh City"

        Format tr·∫£ v·ªÅ:
        - N·∫øu c√≥ ƒë·∫ßy ƒë·ªß th√¥ng tin: "T√™n c·ª• th·ªÉ, Huy·ªán/Qu·∫≠n, T·ªânh/Th√†nh"
        - N·∫øu ch·ªâ c√≥ huy·ªán: "T√™n huy·ªán, T·ªânh" 
        - N·∫øu ch·ªâ c√≥ t·ªânh: "Th√†nh ph·ªë ch√≠nh c·ªßa t·ªânh"

        Ch·ªâ tr·∫£ v·ªÅ t√™n ƒë·ªãa ƒëi·ªÉm, kh√¥ng gi·∫£i th√≠ch:
        """
        
        try:
            response = self.llm.invoke(prompt)
            location = response.content.strip().strip('"\'')
            
            # Validate the response
            if location and len(location) > 2 and location != "Unknown":
                self.logger.info(f"LLM extracted detailed location: {location} from query: {query}")
                return location
            
        except Exception as e:
            self.logger.error(f"LLM detailed location extraction error: {e}")
        
        return None
    
    def _extract_location_with_patterns(self, query: str) -> str:
        """Extract location using regex patterns with detailed administrative levels."""
        query_lower = query.lower()
        
        # Pattern for detailed administrative structure
        # Look for: x√£/ph∆∞·ªùng + huy·ªán/qu·∫≠n + t·ªânh/th√†nh ph·ªë
        detailed_patterns = [
            # Full structure: x√£/ph∆∞·ªùng + huy·ªán + t·ªânh
            r'(?:x√£|ph∆∞·ªùng|th·ªã tr·∫•n)\s+([^,]+),?\s*(?:huy·ªán|qu·∫≠n|th√†nh ph·ªë|tp)\s+([^,]+),?\s*(?:t·ªânh|th√†nh ph·ªë|tp)?\s*([^,\.]+)',
            # Huy·ªán + t·ªânh
            r'(?:huy·ªán|qu·∫≠n|th√†nh ph·ªë|tp)\s+([^,]+),?\s*(?:t·ªânh|th√†nh ph·ªë|tp)?\s*([^,\.]+)',
            # Just t·ªânh/th√†nh ph·ªë
            r'(?:t·ªânh|th√†nh ph·ªë|tp)\s+([^,\.]+)',
        ]
        
        for pattern in detailed_patterns:
            import re
            match = re.search(pattern, query_lower)
            if match:
                groups = match.groups()
                if len(groups) == 3:  # x√£ + huy·ªán + t·ªânh
                    xa, huyen, tinh = groups
                    location = f"{xa.strip().title()}, {huyen.strip().title()}, {tinh.strip().title()}"
                elif len(groups) == 2:  # huy·ªán + t·ªânh
                    huyen, tinh = groups
                    location = f"{huyen.strip().title()}, {tinh.strip().title()}"
                else:  # ch·ªâ t·ªânh
                    tinh = groups[0]
                    location = self._get_main_city_of_province(tinh.strip().title())
                
                self.logger.info(f"Detailed pattern matched: {location} from query: {query}")
                return location
        
        # Extended Vietnamese locations with district/commune level
        location_mappings = {
            # Ho Chi Minh City districts
            'qu·∫≠n 1|district 1': 'District 1, Ho Chi Minh City',
            'qu·∫≠n 3|district 3': 'District 3, Ho Chi Minh City', 
            'qu·∫≠n 7|district 7': 'District 7, Ho Chi Minh City',
            'qu·∫≠n b√¨nh th·∫°nh|binh thanh': 'Binh Thanh District, Ho Chi Minh City',
            'qu·∫≠n th·ªß ƒë·ª©c|thu duc': 'Thu Duc District, Ho Chi Minh City',
            'qu·∫≠n g√≤ v·∫•p|go vap': 'Go Vap District, Ho Chi Minh City',
            
            # Hanoi districts
            'qu·∫≠n ba ƒë√¨nh|ba dinh': 'Ba Dinh District, Hanoi',
            'qu·∫≠n ho√†n ki·∫øm|hoan kiem': 'Hoan Kiem District, Hanoi',
            'qu·∫≠n ƒë·ªëng ƒëa|dong da': 'Dong Da District, Hanoi',
            'qu·∫≠n c·∫ßu gi·∫•y|cau giay': 'Cau Giay District, Hanoi',
            
            # Gia Lai detailed
            'huy·ªán ƒë·∫Øk p∆°|dak po': 'Dak Po, Gia Lai',
            'huy·ªán ch∆∞ pr√¥ng|chu prong': 'Chu Prong, Gia Lai',
            'huy·ªán ia grai': 'Ia Grai, Gia Lai',
            'th·ªã x√£ an kh√™|an khe': 'An Khe, Gia Lai',
            'huy·ªán kong chro': 'Kong Chro, Gia Lai',
            
            # ƒê·∫Øk L·∫Øk detailed
            'huy·ªán ea hleo': 'Ea H Leo, Dak Lak',
            'huy·ªán kr√¥ng b√∫k|krong buk': 'Krong Buk, Dak Lak',
            'huy·ªán m ƒër·∫Øk|m drak': 'M Drak, Dak Lak',
            'th·ªã x√£ bu√¥n h·ªì|buon ho': 'Buon Ho, Dak Lak',
            
            # L√¢m ƒê·ªìng detailed
            'huy·ªán ƒë·ª©c tr·ªçng|duc trong': 'Duc Trong, Lam Dong',
            'huy·ªán l·∫°c d∆∞∆°ng|lac duong': 'Lac Duong, Lam Dong',
            'huy·ªán ƒë∆°n d∆∞∆°ng|don duong': 'Don Duong, Lam Dong',
            'th·ªã x√£ b·∫£o l·ªôc|bao loc': 'Bao Loc, Lam Dong',
            
            # Major provinces with main cities
            'h·ªì ch√≠ minh|s√†i g√≤n|tp hcm|th√†nh ph·ªë h·ªì ch√≠ minh': 'Ho Chi Minh City',
            'h√† n·ªôi|hanoi|th·ªß ƒë√¥': 'Hanoi',
            'ƒë√† n·∫µng|da nang': 'Da Nang',
            'c·∫ßn th∆°|can tho': 'Can Tho',
            'h·∫£i ph√≤ng|hai phong': 'Hai Phong',
            
            # Central Vietnam
            'ƒë√† l·∫°t|da lat|l√¢m ƒë·ªìng|lam dong': 'Da Lat',
            'gia lai|pleiku': 'Pleiku',
            'ƒë·∫Øk l·∫Øk|dak lak|bu√¥n ma thu·ªôt|buon ma thuot': 'Buon Ma Thuot',
            'kh√°nh h√≤a|khanh hoa|nha trang': 'Nha Trang',
            'hu·∫ø|hue|th·ª´a thi√™n hu·∫ø': 'Hue',
            'qu·∫£ng nam|quang nam|h·ªôi an|hoi an': 'Hoi An',
            'b√¨nh ƒë·ªãnh|binh dinh|quy nhon': 'Quy Nhon',
            'ph√∫ y√™n|phu yen|tuy hoa': 'Tuy Hoa',
            
            # Northern Vietnam  
            'ngh·ªá an|nghe an|vinh': 'Vinh',
            'th√°i nguy√™n|thai nguyen': 'Thai Nguyen',
            'l·∫°ng s∆°n|lang son': 'Lang Son',
            'h·∫° long|ha long|qu·∫£ng ninh': 'Ha Long',
            'sapa|sa pa|l√†o cai': 'Sapa',
            'cao b·∫±ng|cao bang': 'Cao Bang',
            'h√† giang|ha giang': 'Ha Giang',
            'ƒëi·ªán bi√™n|dien bien': 'Dien Bien Phu',
            
            # Southern Vietnam
            'v≈©ng t√†u|vung tau|b√† r·ªãa|ba ria': 'Vung Tau',
            'bi√™n h√≤a|bien hoa|ƒë·ªìng nai|dong nai': 'Bien Hoa',
            'b√¨nh d∆∞∆°ng|binh duong|th·ªß d·∫ßu m·ªôt': 'Thu Dau Mot',
            't√¢y ninh|tay ninh': 'Tay Ninh',
            'ph√∫ qu·ªëc|phu quoc': 'Phu Quoc',
            'c√† mau|ca mau': 'Ca Mau',
            
            # Mekong Delta
            'an giang|long xuy√™n|long xuyen': 'Long Xuyen',
            's√≥c trƒÉng|soc trang': 'Soc Trang',
            'vƒ©nh long|vinh long': 'Vinh Long',
            'b·∫øn tre|ben tre': 'Ben Tre',
            'tr√† vinh|tra vinh': 'Tra Vinh',
            'h·∫≠u giang|hau giang|v·ªã thanh': 'Vi Thanh',
            'ki√™n giang|kien giang|r·∫°ch gi√°': 'Rach Gia',
            
            # Central Highlands
            'kon tum': 'Kon Tum',
            'ƒë·∫Øk n√¥ng|dak nong': 'Gia Nghia',
        }
        
        # Try to match patterns with priority for more specific locations
        matched_locations = []
        for pattern, location in location_mappings.items():
            if any(keyword in query_lower for keyword in pattern.split('|')):
                matched_locations.append((location, len(pattern.split('|'))))
        
        # Sort by specificity (more keywords = more specific)
        if matched_locations:
            # Return the most specific match
            best_match = sorted(matched_locations, key=lambda x: x[1], reverse=True)[0]
            location = best_match[0]
            self.logger.info(f"Specific pattern matched: {location} from query: {query}")
            return location
        
        # Final fallback: look for any administrative indicators
        admin_indicators = [
            (r'x√£\s+(\w+(?:\s+\w+)?)', 'commune'),
            (r'ph∆∞·ªùng\s+(\w+(?:\s+\w+)?)', 'ward'),
            (r'huy·ªán\s+(\w+(?:\s+\w+)?)', 'district'), 
            (r'qu·∫≠n\s+(\w+(?:\s+\w+)?)', 'district'),
            (r'th·ªã x√£\s+(\w+(?:\s+\w+)?)', 'town'),
            (r'th√†nh ph·ªë\s+(\w+(?:\s+\w+)?)', 'city')
        ]
        
        for pattern, admin_type in admin_indicators:
            import re
            match = re.search(pattern, query_lower)
            if match:
                place_name = match.group(1).title()
                self.logger.info(f"Administrative unit detected: {place_name} ({admin_type})")
                return place_name
        
        # Ultimate fallback
        self.logger.info("No detailed location detected, using default: Ho Chi Minh City")
        return 'Ho Chi Minh City'
    
    def _get_main_city_of_province(self, province: str) -> str:
        """Get main city/capital of a province."""
        province_capitals = {
            'Gia Lai': 'Pleiku',
            'Lam Dong': 'Da Lat', 
            'Dak Lak': 'Buon Ma Thuot',
            'Khanh Hoa': 'Nha Trang',
            'Binh Dinh': 'Quy Nhon',
            'Phu Yen': 'Tuy Hoa',
            'Quang Nam': 'Hoi An',
            'Nghe An': 'Vinh',
            'Thai Nguyen': 'Thai Nguyen',
            'Cao Bang': 'Cao Bang',
            'Ha Giang': 'Ha Giang',
            'An Giang': 'Long Xuyen',
            'Ca Mau': 'Ca Mau',
            'Soc Trang': 'Soc Trang',
            'Vinh Long': 'Vinh Long',
            'Ben Tre': 'Ben Tre',
            'Kon Tum': 'Kon Tum'
        }
        
        return province_capitals.get(province, province)
    
    def _format_pure_weather_response(self, weather: WeatherCondition) -> str:
        """Format pure weather response without agriculture advice."""
        from datetime import datetime
        
        current_time = datetime.now().strftime("%H:%M, %A")
        
        response = f"""üìç **{weather.location_name}**
üïê {current_time}
{"-" * 40}

üå°Ô∏è **Nhi·ªát ƒë·ªô hi·ªán t·∫°i**
     {weather.temperature}¬∞C
     C·∫£m gi√°c nh∆∞ {weather.feels_like}¬∞C
     {weather.description}

üíß **ƒê·ªô ·∫©m**: {weather.humidity}%
üí® **Gi√≥**: {weather.wind_speed:.1f} km/h {weather.wind_direction_text}
üîÜ **√Åp su·∫•t**: {weather.pressure} hPa
üëÅÔ∏è **T·∫ßm nh√¨n**: {weather.visibility} km
‚òÄÔ∏è **Ch·ªâ s·ªë UV**: {weather.uv_index} ({self.weather_advisor._get_uv_description(weather.uv_index)})
‚òÅÔ∏è **M√¢y**: {weather.clouds}%
üíß **ƒêi·ªÉm s∆∞∆°ng**: {weather.dew_point:.1f}¬∞C"""

        if weather.sunrise and weather.sunset:
            response += f"""
üåÖ **B√¨nh minh**: {weather.sunrise.strftime('%H:%M')}
üåá **Ho√†ng h√¥n**: {weather.sunset.strftime('%H:%M')}"""

        if weather.rain_probability:
            response += f"""
üåßÔ∏è **X√°c su·∫•t m∆∞a**: {weather.rain_probability}%"""
        
        return response
    
    def _is_weather_followup_question(self, query: str, conversation_history: List[Dict]) -> bool:
        """Check if current query is a follow-up to previous weather question."""
        if not conversation_history:
            return False
        
        # Check last conversation turn
        last_turn = conversation_history[-1] if conversation_history else {}
        last_intent = last_turn.get("intent")
        
        # Check if last question was about weather
        if last_intent not in ["weather_query", "weather_agriculture"]:
            return False
        
        # Check if current query is contextual (no explicit location)
        query_lower = query.lower()
        followup_indicators = [
            "v·ªõi th·ªùi ti·∫øt n√†y", "trong ƒëi·ªÅu ki·ªán n√†y", "theo th√¥ng tin tr√™n",
            "d·ª±a v√†o th·ªùi ti·∫øt", "n√™n l√†m g√¨", "c√≥ ph√π h·ª£p", "th√¨ sao",
            "l√†m g√¨ ti·∫øp", "c√≥ n√™n", "t∆∞∆°ng t·ª±", "nh∆∞ v·∫≠y"
        ]
        
        return any(indicator in query_lower for indicator in followup_indicators)
    
    def _get_detailed_agriculture_context(self, crop: str, weather: 'WeatherCondition', query: str) -> Dict[str, Any]:
        """Get detailed agriculture context from knowledge base."""
        try:
            # Enhanced search query combining crop and weather conditions
            search_query = f"""
            {crop} {query} 
            nhi·ªát ƒë·ªô {weather.temperature}¬∞C 
            ƒë·ªô ·∫©m {weather.humidity}% 
            {weather.description}
            t∆∞·ªõi n∆∞·ªõc ph√¢n b√≥n chƒÉm s√≥c
            """
            
            # Search knowledge base with expanded context
            search_result = self.search_tools.search_knowledge_base(
                query=search_query,
                limit=10,  # Get more results for comprehensive advice
                min_score=0.2  # Lower threshold for broader context
            )
            
            return {
                "context": search_result.get("context", ""),
                "sources": search_result.get("sources", []),
                "has_results": search_result.get("has_results", False)
            }
            
        except Exception as e:
            self.logger.error(f"Failed to get detailed agriculture context: {e}")
            return {"context": "", "sources": [], "has_results": False}
    
    def _generate_comprehensive_weather_agriculture_response(
        self, 
        weather: 'WeatherCondition',
        advice: 'AgricultureAdvice', 
        detailed_context: Dict[str, Any],
        user_query: str,
        conversation_history: List[Dict]
    ) -> str:
        """Generate comprehensive response combining weather + detailed knowledge."""
        
        # Build context from conversation history
        conversation_context = ""
        if conversation_history:
            recent_context = conversation_history[-2:]  # Last 2 turns
            for turn in recent_context:
                conversation_context += f"Q: {turn.get('user_query', '')}\nA: {turn.get('response', '')[:200]}...\n\n"
        
        # Enhanced prompt for comprehensive response
        prompt = f"""
        B·∫°n l√† chuy√™n gia n√¥ng nghi·ªáp h√†ng ƒë·∫ßu v·ªõi 20+ nƒÉm kinh nghi·ªám t∆∞ v·∫•n c√† ph√™ v√† c√¢y tr·ªìng.
        H√£y t·∫°o ra l·ªùi t∆∞ v·∫•n chi ti·∫øt, to√†n di·ªán d·ª±a tr√™n th√¥ng tin th·ªùi ti·∫øt th·ª±c t·∫ø v√† ki·∫øn th·ª©c chuy√™n m√¥n.

        TH√îNG TIN TH·ªúI TI·∫æT HI·ªÜN T·∫†I:
        üìç ƒê·ªãa ƒëi·ªÉm: {weather.location_name}
        üå°Ô∏è Nhi·ªát ƒë·ªô: {weather.temperature}¬∞C (c·∫£m gi√°c {weather.feels_like}¬∞C)
        üíß ƒê·ªô ·∫©m: {weather.humidity}%
        üí® Gi√≥: {weather.wind_speed:.1f} km/h {weather.wind_direction_text}
        ‚òÄÔ∏è UV: {weather.uv_index} 
        üîÜ √Åp su·∫•t: {weather.pressure} hPa
        ‚òÅÔ∏è M√¢y: {weather.clouds}%
        üìù T√¨nh tr·∫°ng: {weather.description}

        C√ÇU H·ªéI HI·ªÜN T·∫†I: "{user_query}"

        NG·ªÆ C·∫¢NH H·ªòI THO·∫†I TR∆Ø·ªöC:
        {conversation_context}

        KI·∫æN TH·ª®C CHUY√äN M√îN THAM KH·∫¢O:
        {detailed_context.get('context', 'Kh√¥ng c√≥ th√¥ng tin b·ªï sung')}

        NHI·ªÜM V·ª§:
        1. Ph√¢n t√≠ch chi ti·∫øt t√°c ƒë·ªông c·ªßa th·ªùi ti·∫øt l√™n {advice.crop_type}
        2. ƒê∆∞a ra khuy·∫øn ngh·ªã c·ª• th·ªÉ, c√≥ th·ªÉ th·ª±c hi·ªán ngay
        3. Gi·∫£i th√≠ch l√Ω do khoa h·ªçc ƒë·∫±ng sau m·ªói khuy·∫øn ngh·ªã
        4. Bao g·ªìm l∆∞u √Ω v·ªÅ th·ªùi ƒëi·ªÉm, c√°ch th·ª©c th·ª±c hi·ªán
        5. C·∫£nh b√°o r·ªßi ro v√† c√°ch ph√≤ng tr√°nh

        Y√äU C·∫¶U TR√åNH B√ÄY:
        ‚Ä¢ **T·ª± nhi√™n**: Nh∆∞ ƒëang t∆∞ v·∫•n tr·ª±c ti·∫øp cho n√¥ng d√¢n
        ‚Ä¢ **Chi ti·∫øt**: 500-800 t·ª´ v·ªõi th√¥ng tin h·ªØu √≠ch
        ‚Ä¢ **C√≥ c·∫•u tr√∫c**: S·ª≠ d·ª•ng heading v√† bullet points r√µ r√†ng
        ‚Ä¢ **Th·ª±c t·∫ø**: Khuy·∫øn ngh·ªã c√≥ th·ªÉ √°p d·ª•ng ngay v·ªõi ƒëi·ªÅu ki·ªán hi·ªán t·∫°i
        ‚Ä¢ **Khoa h·ªçc**: Gi·∫£i th√≠ch c∆° s·ªü khoa h·ªçc khi c·∫ßn thi·∫øt

        FORMAT RESPONSE:
        
        ## üå§Ô∏è PH√ÇN T√çCH TH·ªúI TI·∫æT & T√ÅC ƒê·ªòNG

        ## üí° KHUY·∫æN NGH·ªä CHI TI·∫æT

        ## ‚ö†Ô∏è L∆ØU √ù QUAN TR·ªåNG

        ## üìÖ K·∫æ HO·∫†CH TH·ª∞C HI·ªÜN

        H√£y vi·∫øt nh∆∞ m·ªôt chuy√™n gia ƒëang chia s·∫ª kinh nghi·ªám th·ª±c t·∫ø, kh√¥ng ph·∫£i tr√≠ch d·∫´n t√†i li·ªáu.
        """
        
        try:
            response = self.llm.invoke(prompt)
            comprehensive_response = response.content.strip()
            
            # Add weather display header
            weather_header = self.weather_advisor.format_detailed_weather_response(weather, advice)
            
            # Combine weather display + comprehensive advice
            final_response = f"{weather_header}\n\n{'='*60}\nüßë‚Äçüåæ **T∆Ø V·∫§N CHUY√äN S√ÇU T·ª™ CHUY√äN GIA**\n{'='*60}\n\n{comprehensive_response}"
            
            # Add sources if available
            if detailed_context.get("sources"):
                source_names = [s.get('filename', 't√†i li·ªáu chuy√™n ng√†nh').replace('.pdf', '') for s in detailed_context["sources"][:3]]
                final_response += f"\n\n---\n*üìö Tham kh·∫£o t·ª´: {', '.join(source_names)}*"
            
            return final_response
            
        except Exception as e:
            self.logger.error(f"Failed to generate comprehensive response: {e}")
            # Fallback to basic weather response
            return self.weather_advisor.format_detailed_weather_response(weather, advice)
    
    def _extract_crop_from_query(self, query: str) -> str:
        """Extract crop type from user query."""
        query_lower = query.lower()
        
        # Common Vietnamese crop names
        crop_patterns = {
            'c√† ph√™': ['c√† ph√™', 'cafe', 'coffee'],
            'l√∫a': ['l√∫a', 'l√∫a g·∫°o', 'g·∫°o', 'rice'],
            'ti√™u': ['ti√™u', 'h·∫°t ti√™u', 'pepper'],
            'cao su': ['cao su', 'rubber'],
            'ƒëi·ªÅu': ['ƒëi·ªÅu', 'h·∫°t ƒëi·ªÅu', 'cashew'],
            'd·ª´a': ['d·ª´a', 'coconut'],
            'chu·ªëi': ['chu·ªëi', 'banana'],
            'xo√†i': ['xo√†i', 'mango'],
            'b∆∞·ªüi': ['b∆∞·ªüi', 'pomelo'],
            'cam': ['cam', 'orange'],
            'chanh': ['chanh', 'lemon'],
            'khoai lang': ['khoai lang', 'sweet potato'],
            'khoai t√¢y': ['khoai t√¢y', 'potato'],
            'ng√¥': ['ng√¥', 'b·∫Øp', 'corn', 'maize'],
            'ƒë·∫≠u': ['ƒë·∫≠u', 'bean'],
            'rau': ['rau', 'vegetable'],
            'hoa': ['hoa', 'flower']
        }
        
        # Check for crop mentions in query
        for crop, patterns in crop_patterns.items():
            for pattern in patterns:
                if pattern in query_lower:
                    self.logger.info(f"Detected crop: {crop}")
                    return crop
        
        # Default to coffee if no specific crop mentioned
        self.logger.info("No specific crop detected, defaulting to 'c√† ph√™'")
        return 'c√† ph√™'
    
    def _get_timestamp(self) -> str:
        """Get current timestamp."""
        from datetime import datetime
        return datetime.utcnow().isoformat()